version: "3.8"

services:
  app:
    container_name: control_lesson_app
    build:
      context: ./app
      dockerfile: Dockerfile
    depends_on:
      - db
      - redis
    command: bash -c "./wait-for-db.sh db && pytest -v tests && uvicorn main:create_app --host 0.0.0.0 --port 8000"
    # command: bash -c "./wait-for-db.sh db && uvicorn main:create_app --host 0.0.0.0 --port 8000"
    volumes:
      - ./app:/code
    networks:
      - app-network
    ports:
      - ${APP_HOST_PORT}:8000
    # restart: always
    env_file:
      - .env

  db:
    container_name: control_lesson_postgres
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
      - TEST_DB=${TEST_DB_NAME}
      - TEST_USER=${TEST_DB_USER}
      - TEST_PASSWORD=${TEST_DB_PASSWORD}
    networks:
      - app-network
    ports:
      - ${POSTGRES_DB_HOST_PORT}:5432
    volumes:
      - .postgres:/var/lib/postgresql/data
      - ./db/generate_sql.sh:/docker-entrypoint-initdb.d/generate_sql.sh
    restart: always

  redis:
    container_name: control_lesson_redis
    image: redis
    networks:
      - app-network
    ports:
      - ${REDIS_DB_HOST_PORT}:6379
    restart: always

  web:
    container_name: control_lesson_web
    build:
      context: ./web
      dockerfile: Dockerfile
    depends_on:
      - app
    networks:
      - app-network
    ports:
      - ${WEB_HOST_PORT}:8080
    restart: always

  cms:
    container_name: control_lesson_cms
    build:
      context: ./cms
      dockerfile: Dockerfile
    depends_on:
      - app
    networks:
      - app-network
    ports:
      - ${CMS_HOST_PORT}:8000
    # restart: always

networks:
  app-network:
    driver: bridge
